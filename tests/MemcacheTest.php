<?php


namespace EasySwoole\Memcache\Tests;


use EasySwoole\Memcache\Config;
use EasySwoole\Memcache\Memcache;
use PHPUnit\Framework\TestCase;
use Swoole\Coroutine;

class MemcacheTest extends TestCase
{
    /** @var Memcache */
    private $client;

    function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        defined('MEMCACHE_HOST') or define('MEMCACHE_HOST', '127.0.0.1');
        defined('MEMCACHE_PORT') or define('MEMCACHE_PORT', 11211);
    }

    function runTest()
    {
        $config = new Config([
            'host' => MEMCACHE_HOST,
            'port' => MEMCACHE_PORT
        ]);
        $this->client = new Memcache($config);
        return parent::runTest(); // TODO: Change the autogenerated stub
    }

    function testSet()
    {
        $this->assertEquals(true, $this->client->set('setStr', 'setStr'));
        $this->assertEquals(true, $this->client->set('setInt', 1));
        $this->assertEquals(true, $this->client->set('keyNULL', NULL));
    }

    function testGet()
    {
        $this->assertEquals('setStr', $this->client->get('setStr'));
        $this->assertEquals(1, $this->client->get('setInt'));
        $this->assertEquals(null, $this->client->get('keyNULL'));
    }

    function testConnect()
    {
        $this->assertTrue($this->client->connect());
    }

    function testTouch()
    {
        $key = 'testTouch';
        $this->client->set($key, 1, 2);
        Coroutine::sleep(1);
        $this->client->touch($key, 2);
        Coroutine::sleep(1);
        $this->assertEquals(1, $this->client->get($key));

    }

    function testIncrement()
    {
        $key = 'testIncrement';
        $this->client->set($key, 0);
        $this->client->increment($key);
        $this->assertEquals(1, $this->client->get($key));
    }

    function testDecrement()
    {
        $key = 'testDecrement';
        $this->client->set($key, 1);
        $this->client->decrement($key);
        $this->assertEquals(0, $this->client->get($key));
    }

    function testReplace()
    {
        $key = 'testReplace';
        $value = 'testReplace';
        $this->client->set($key, $value);
        $this->client->replace($key, $value . $value);
        $this->assertEquals($value . $value, $this->client->get($key));

    }

    function testAppend()
    {
        $key = 'testAppend';
        $value = 'testAppend';
        $this->client->set($key, $value);
        $this->client->append($key, $value . 'a');
        $this->assertEquals($value . $value . 'a', $this->client->get($key));
    }

    function testPrepend()
    {
        $key = 'testPrepend';
        $value = 'b';
        $this->client->set($key, $value);//b
        $this->client->prepend($key, 'a');//bab
        $this->assertEquals('a' . $value, $this->client->get($key));

    }

    function testDelete()
    {
        $key = 'testDelete';
        $value = 'testDelete';
        $this->client->set($key, $value);
        $this->client->delete($key);
        $this->assertEquals(null, $this->client->get($key));
    }

    function testStats()
    {
        $this->assertArrayHasKey('pid', $this->client->stats());
    }

    function testVersion()
    {
        $this->assertTrue(!!$this->client->version());
    }

    function testFlush()
    {
        $this->client->set('a', 1);
        $this->client->set('b', 1);
        $this->client->set('c', 1);
        $this->client->flush();
        $this->assertNull($this->client->get('a'));
        $this->assertNull($this->client->get('b'));
        $this->assertNull($this->client->get('c'));
    }

    function testSetMulti()
    {
        $res = $this->client->setMulti([
            'testMulti1' => 1,
            'testMulti2' => 2
        ]);
        $this->assertEquals(
            [
                'testMulti1' => true
                , 'testMulti2' => true
            ], $res
        );
    }

    function testGetMulti()
    {
        $this->client->setMulti([
            'testMulti1' => 3,
            'testMulti2' => 4,
        ]);
        $res = $this->client->getMulti([
            'testMulti1'
            , 'testMulti2'
        ]);
        $this->assertEquals(
            [
                'testMulti1' => 3,
                'testMulti2' => 4
            ], $res
        );

        $res = $this->client->getMulti([
            'testMulti1'
        ], true);

        $this->assertArrayHasKey('cas', $res['testMulti1']);
        $this->assertArrayHasKey('value', $res['testMulti1']);
        $this->assertEquals(3, $res['testMulti1']['value']);
    }

    public function testCas()
    {
        $this->client->set('testCas1', 'v1');
        $res = $this->client->getMulti(['testCas1'], true);
        $casToken = $res['testCas1']['cas'];
        $casRes = $this->client->cas($casToken, 'testCas1', 'v2');
        $this->assertEquals(true, $casRes);
        $casRes = $this->client->cas($casToken, 'testCas1', 'v3');
        $this->assertEquals(false, $casRes);
    }

}
